{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"matrix-appservice-slack A bridge that connects Matrix and Slack . The bridge is considered stable and mature for use in production environments. Requirements Hosting this bridge requires you to have a Matrix homeserver. In order to connect a Slack Workspace to your bridge, you will need permission to add bots to it. You will also need Node.JS 10+ or Docker on your system. Setting up See the getting started docs for instructions on how to set up the bridge. Helping out This bridge is a community project and welcomes issues and PRs from anyone who has the time to spare. If you want to work on the bridge, please see CONTRIBUTING.md . Please come visit us in the support room if you have any questions. Documentation Features Getting Started Linking Channels Datastores","title":"Home"},{"location":"#matrix-appservice-slack","text":"A bridge that connects Matrix and Slack . The bridge is considered stable and mature for use in production environments.","title":"matrix-appservice-slack"},{"location":"#requirements","text":"Hosting this bridge requires you to have a Matrix homeserver. In order to connect a Slack Workspace to your bridge, you will need permission to add bots to it. You will also need Node.JS 10+ or Docker on your system.","title":"Requirements"},{"location":"#setting-up","text":"See the getting started docs for instructions on how to set up the bridge.","title":"Setting up"},{"location":"#helping-out","text":"This bridge is a community project and welcomes issues and PRs from anyone who has the time to spare. If you want to work on the bridge, please see CONTRIBUTING.md . Please come visit us in the support room if you have any questions.","title":"Helping out"},{"location":"#documentation","text":"Features Getting Started Linking Channels Datastores","title":"Documentation"},{"location":"datastores/","text":"Datastores Version 1.0+ supports using PostgreSQL as a storage backend instead of the deprecated NeDB storage backend. Using PostgreSQL You must first create a fresh database on an PostgreSQL instance, create a user and grant the user permission on the bridge: CREATE DATABASE slack_bridge ; CREATE USER slackbridge_user WITH PASSWORD 'somethingverysecret' ; GRANT ALL PRIVILEGES ON DATABASE \"slack\" to slackbridge_user ; You should then update the config with details about the new database. db : engine : \"postgres\" connectionString : \"postgresql://slackbridge_user:somethingverysecret@localhost/slack_bridge?sslmode=require\" (replacing \u201csomethingverysecret\u201d with your own password) Ensure that dbdir is not included in the config. NeDB End-of-life NeDB is a library which is used to store json documents locally to disk to give the bridge some local persistent state. All deployments of this bridge before 1.0 will have been using NeDB. Starting with version 1.0 , NeDB will be deprecated and shouldn\u2019t be used for new installations. NeDB is unmaintained and doesn\u2019t scale well for the needs of this bridge. Features such as puppeting will not be supported, however existing functionality will continue to be maintained until support for NeDB is removed. Migrating from an existing NeDB installation From a checkout of the code base you can run: npm run build node lib/scripts/migrateToPostgres.js \"connectionString\" \"dbDir\" \"slackPrefix\" If you use docker you can run: docker run --entrypoint \"node\" -it -v /dbDir:/data matrixdotorg/matrix-appservice-slack:latest \"/usr/src/app/lib/scripts/migrateToPostgres.js\" \"connectionString\" \"/data\" \"slackPrefix\" (Note the docker container will need to be able to access the postgres port, so you might need --network host or to set the ip address to the host etc.) Where you should replace: - connectionString with the value above (such as postgresql://slackbridge_user:somethingverysecret@localhost/slack_bridge?sslmode=require ) - dbDir with the absolute path to your data files - slackPrefix with the prefix of your slack ghost users (e.g. \u201c@slack_\u201d) Once this process has completed and no errors have occured, you may begin using your brand new PostgreSQL database.","title":"Datastores"},{"location":"datastores/#datastores","text":"Version 1.0+ supports using PostgreSQL as a storage backend instead of the deprecated NeDB storage backend.","title":"Datastores"},{"location":"datastores/#using-postgresql","text":"You must first create a fresh database on an PostgreSQL instance, create a user and grant the user permission on the bridge: CREATE DATABASE slack_bridge ; CREATE USER slackbridge_user WITH PASSWORD 'somethingverysecret' ; GRANT ALL PRIVILEGES ON DATABASE \"slack\" to slackbridge_user ; You should then update the config with details about the new database. db : engine : \"postgres\" connectionString : \"postgresql://slackbridge_user:somethingverysecret@localhost/slack_bridge?sslmode=require\" (replacing \u201csomethingverysecret\u201d with your own password) Ensure that dbdir is not included in the config.","title":"Using PostgreSQL"},{"location":"datastores/#nedb-end-of-life","text":"NeDB is a library which is used to store json documents locally to disk to give the bridge some local persistent state. All deployments of this bridge before 1.0 will have been using NeDB. Starting with version 1.0 , NeDB will be deprecated and shouldn\u2019t be used for new installations. NeDB is unmaintained and doesn\u2019t scale well for the needs of this bridge. Features such as puppeting will not be supported, however existing functionality will continue to be maintained until support for NeDB is removed.","title":"NeDB End-of-life"},{"location":"datastores/#migrating-from-an-existing-nedb-installation","text":"From a checkout of the code base you can run: npm run build node lib/scripts/migrateToPostgres.js \"connectionString\" \"dbDir\" \"slackPrefix\" If you use docker you can run: docker run --entrypoint \"node\" -it -v /dbDir:/data matrixdotorg/matrix-appservice-slack:latest \"/usr/src/app/lib/scripts/migrateToPostgres.js\" \"connectionString\" \"/data\" \"slackPrefix\" (Note the docker container will need to be able to access the postgres port, so you might need --network host or to set the ip address to the host etc.) Where you should replace: - connectionString with the value above (such as postgresql://slackbridge_user:somethingverysecret@localhost/slack_bridge?sslmode=require ) - dbDir with the absolute path to your data files - slackPrefix with the prefix of your slack ghost users (e.g. \u201c@slack_\u201d) Once this process has completed and no errors have occured, you may begin using your brand new PostgreSQL database.","title":"Migrating from an existing NeDB installation"},{"location":"features/","text":"Features The list below is a mostly exhuastive list of features that the bridge supports. Bridging Slack Channels [x] Public [x] Private [x] IM (puppeting) Administration [x] Provisioning API [x] Admin Room [ ] User Admin Rooms [x] Metrics - via prometheus Direct Messaging (puppeting) [1] [x] Matrix -> Slack [x] Slack -> Matrix Content bridging (in both directions) [x] Text (m.text) [x] Formatted Text (m.text html) [x] Audio/Video (m.audio/m.video) [x] Files (m.file) Redactions [x] Matrix -> Slack [x] Slack -> Matrix Reactions [x] Matrix -> Slack [2] [x] Slack -> Matrix [3] Edits [x] Matrix -> Slack [x] Slack -> Matrix Threading [x] Matrix -> Slack [x] Slack -> Matrix Membership Syncing [ ] Matrix -> Slack [ ] Slack -> Matrix Topics [ ] Matrix -> Slack [ ] Slack -> Matrix Cannot initiate a DM from Matrix to Slack currently if the user on Slack has not yet spoken . Can only bridge on reaction of each type, as the Slack bot can only react once. This is not a limitation for puppeted users. Slack users cannot currently remove reactions on Matrix due to a limitation .","title":"Features"},{"location":"features/#features","text":"The list below is a mostly exhuastive list of features that the bridge supports. Bridging Slack Channels [x] Public [x] Private [x] IM (puppeting) Administration [x] Provisioning API [x] Admin Room [ ] User Admin Rooms [x] Metrics - via prometheus Direct Messaging (puppeting) [1] [x] Matrix -> Slack [x] Slack -> Matrix Content bridging (in both directions) [x] Text (m.text) [x] Formatted Text (m.text html) [x] Audio/Video (m.audio/m.video) [x] Files (m.file) Redactions [x] Matrix -> Slack [x] Slack -> Matrix Reactions [x] Matrix -> Slack [2] [x] Slack -> Matrix [3] Edits [x] Matrix -> Slack [x] Slack -> Matrix Threading [x] Matrix -> Slack [x] Slack -> Matrix Membership Syncing [ ] Matrix -> Slack [ ] Slack -> Matrix Topics [ ] Matrix -> Slack [ ] Slack -> Matrix Cannot initiate a DM from Matrix to Slack currently if the user on Slack has not yet spoken . Can only bridge on reaction of each type, as the Slack bot can only react once. This is not a limitation for puppeted users. Slack users cannot currently remove reactions on Matrix due to a limitation .","title":"Features"},{"location":"getting_started/","text":"Getting Started In this guide we will setup the bridge connected to your homeserver. This guide will walk through the most common settings, other options are documented in the config.sample.yaml file. Installation These instructions assume you are using Syanpse 1.4.0+. They should work for older releases and other homeservers, but configruation may vary. From source $ git clone https://github.com/matrix-org/matrix-appservice-slack.git $ cd Matrix-appservice-slack $ npm install $ npm run build With Docker $ docker pull matrixdotorg/matrix-appservice-slack:latest How it Works: The bridge listens to events using the Slack RTM API over websockets, and to Matrix events on a port that the homeserver sends events to. This tutorial will walk you through configuring your homeserver and Slack to send messages to this bridge and setting up the api so this bridge can relay those message (all messages) to the other bridged channel. For the sake of this tutorial, we will assume your homeserver is hosted on the same server as this bridge at the port 8008 (http://localhost:8008). If you\u2019ve set up other bridges, you\u2019re probably familiar with the link used to reach your homeserver, the \u201chomeserver url\u201d. This is the same URL. This is the same port. No problem! Multiple bridges can plug into the same homeserver url without conflicting with each other. NOTE: If your bridge and homeserver run on different machines, you will need to introduce proxying into the mix, which is beyond the scope of these docs. There are some really awesome and kind people in the Matrix community. If you\u2019re ever stuck, you can post a question in the Matrix Bridging room . Setup Create a new Matrix room to act as the administration control room. Note its internal room ID (EX: !abcdefg12345hijk:coolserver.com). Decide on a spare local TCP port number to use. It will listen for messages from Matrix and needs to be visible to the homeserver. Take care to configure firewalls appropriately. This ports will be notated as $MATRIX_PORT in the remaining instructions. Create a config.yaml file for global configuration. There is a sample one to begin with in config/config.sample.yaml . You should copy and edit as appropriate. The required and optional values are flagged in the config. See datastores on how to setup a database with the bridge. Generate the appservice registration file. This will be used by the Matrix homeserver. Here, you must specify the direct link the Matrix Homserver can use to access the bridge, including the Matrix port it will send messages through (if this bridge runs on the same machine you can use localhost as the $HOST name): $ npm start -- -r -c config.yaml -u \"http://$HOST:$MATRIX_PORT\" or with docker: $ docker run -v /path/to/config/:/config/ matrixdotorg/matrix-appservice-slack \\ -r -c /config/config.yaml -u \"http:// $HOST : $MATRIX_PORT \" -f /config/slack.yaml Start the actual application service: $ npm start -c config.yaml -p $MATRIX_PORT or with docker: $ docker run -v /path/to/config/:/config/ matrixdotorg/matrix-appservice-slack Copy the newly-generated slack-registration.yaml file to your Matrix homeserver. Add the registration file to your homeserver config (default homeserver.yaml ): app_service_config_files : - ... - \"/path/to/slack-registration.yaml\" Don\u2019t forget - it has to be a YAML list of strings, not just a single string. Restart your homeserver to have it reread the config file an establish a connection to the bridge. Invite the bridge bot user into the admin room, so it can actually see and respond to commands. The bot\u2019s user ID is formed from the sender_localpart field of the registration file, and the homeserver\u2019s domain name. For example: /invite @slackbot:my.server.here NOTE: At the time of writing, Riot does not recognize the Slack bot. This is okay. The bot is there . If Riot asks if you\u2019re sure you want to invite @slackbot, just say yes. The bridge bot will stay offline for most of the time. This is normal. You will know if the bridge is working (and that your homeserver is properly connected) if it accepts your invitation. You can expect the bot to accept within 45 seconds of being invited. If it never accepts the invitation, check your bridge\u2019s logs and review the above steps. The bridge itself should now be running. Congrats! To actually use it, you will need to configure some linked channels, see linking channels . Proxying If you want to host this bridge on a different server than your homeserver, you will have to proxy the bridge so both the Matrix port (specified when creating your registration file through the -u property) and the Slack port (specified by the inbound_uri prefix in your config file) can be reached. This way both the Matrix homeserver and the Slack API can reach your bridge.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"In this guide we will setup the bridge connected to your homeserver. This guide will walk through the most common settings, other options are documented in the config.sample.yaml file.","title":"Getting Started"},{"location":"getting_started/#installation","text":"These instructions assume you are using Syanpse 1.4.0+. They should work for older releases and other homeservers, but configruation may vary.","title":"Installation"},{"location":"getting_started/#from-source","text":"$ git clone https://github.com/matrix-org/matrix-appservice-slack.git $ cd Matrix-appservice-slack $ npm install $ npm run build","title":"From source"},{"location":"getting_started/#with-docker","text":"$ docker pull matrixdotorg/matrix-appservice-slack:latest","title":"With Docker"},{"location":"getting_started/#how-it-works","text":"The bridge listens to events using the Slack RTM API over websockets, and to Matrix events on a port that the homeserver sends events to. This tutorial will walk you through configuring your homeserver and Slack to send messages to this bridge and setting up the api so this bridge can relay those message (all messages) to the other bridged channel. For the sake of this tutorial, we will assume your homeserver is hosted on the same server as this bridge at the port 8008 (http://localhost:8008). If you\u2019ve set up other bridges, you\u2019re probably familiar with the link used to reach your homeserver, the \u201chomeserver url\u201d. This is the same URL. This is the same port. No problem! Multiple bridges can plug into the same homeserver url without conflicting with each other. NOTE: If your bridge and homeserver run on different machines, you will need to introduce proxying into the mix, which is beyond the scope of these docs. There are some really awesome and kind people in the Matrix community. If you\u2019re ever stuck, you can post a question in the Matrix Bridging room .","title":"How it Works:"},{"location":"getting_started/#setup","text":"Create a new Matrix room to act as the administration control room. Note its internal room ID (EX: !abcdefg12345hijk:coolserver.com). Decide on a spare local TCP port number to use. It will listen for messages from Matrix and needs to be visible to the homeserver. Take care to configure firewalls appropriately. This ports will be notated as $MATRIX_PORT in the remaining instructions. Create a config.yaml file for global configuration. There is a sample one to begin with in config/config.sample.yaml . You should copy and edit as appropriate. The required and optional values are flagged in the config. See datastores on how to setup a database with the bridge. Generate the appservice registration file. This will be used by the Matrix homeserver. Here, you must specify the direct link the Matrix Homserver can use to access the bridge, including the Matrix port it will send messages through (if this bridge runs on the same machine you can use localhost as the $HOST name): $ npm start -- -r -c config.yaml -u \"http://$HOST:$MATRIX_PORT\" or with docker: $ docker run -v /path/to/config/:/config/ matrixdotorg/matrix-appservice-slack \\ -r -c /config/config.yaml -u \"http:// $HOST : $MATRIX_PORT \" -f /config/slack.yaml Start the actual application service: $ npm start -c config.yaml -p $MATRIX_PORT or with docker: $ docker run -v /path/to/config/:/config/ matrixdotorg/matrix-appservice-slack Copy the newly-generated slack-registration.yaml file to your Matrix homeserver. Add the registration file to your homeserver config (default homeserver.yaml ): app_service_config_files : - ... - \"/path/to/slack-registration.yaml\" Don\u2019t forget - it has to be a YAML list of strings, not just a single string. Restart your homeserver to have it reread the config file an establish a connection to the bridge. Invite the bridge bot user into the admin room, so it can actually see and respond to commands. The bot\u2019s user ID is formed from the sender_localpart field of the registration file, and the homeserver\u2019s domain name. For example: /invite @slackbot:my.server.here NOTE: At the time of writing, Riot does not recognize the Slack bot. This is okay. The bot is there . If Riot asks if you\u2019re sure you want to invite @slackbot, just say yes. The bridge bot will stay offline for most of the time. This is normal. You will know if the bridge is working (and that your homeserver is properly connected) if it accepts your invitation. You can expect the bot to accept within 45 seconds of being invited. If it never accepts the invitation, check your bridge\u2019s logs and review the above steps. The bridge itself should now be running. Congrats! To actually use it, you will need to configure some linked channels, see linking channels .","title":"Setup"},{"location":"getting_started/#proxying","text":"If you want to host this bridge on a different server than your homeserver, you will have to proxy the bridge so both the Matrix port (specified when creating your registration file through the -u property) and the Slack port (specified by the inbound_uri prefix in your config file) can be reached. This way both the Matrix homeserver and the Slack API can reach your bridge.","title":"Proxying"},{"location":"link_channels/","text":"Linking Channels This bridge allows linking together pairs of Matrix rooms and Slack channels, relaying messages said by people in one side into the other. To create a link, first the individual Matrix room and Slack channel need to be created, and then a command needs to be issued in the administration console room to add the link to the bridge\u2019s database. RTM API This is the newer and recommended way to use the bridge. Add a custom app to your Slack team/workspace by visiting https://api.Slack.com/apps and clicking on Create New App . Name the app & select the team/workspace this app will belong to. Click on bot users and add a new bot user. We will use this account to bridge the the rooms. Click on Install App and Install App to Workspace . Note the access tokens show. You will need the Bot User OAuth Access Token and if you want to bridge files, the OAuth Access Token whenever you link a room. For each channel you would like to bridge, perform the following steps: Create a Matrix room in the usual manner for your client. Take a note of its Matrix room ID - it will look something like !aBcDeF:example.com . Invite the Matrix bot user to the Matrix channel you would like to bridge. /invite @Slackbot:my.server.here This is the same command used to invite the bot to the Admin Control Room. Note that you may have to wait for the Slackbot to accept the invitation. Invite the Slack bot user to the Slack channel you would like to bridge. /invite @bot-user-name You will also need to determine the \u201cchannel ID\u201d that Slack uses to identify the channel. Right-click your channel name in Slack and select \u201cCopy Link\u201d. The channel id is the last argument in the url ( https://XXX.Slack.com/messages/<channel id>/ ) Issue a link command in the administration control room with these collected values as arguments: link --channel_id CHANNELID --room !the-matrix:room.id --slack_bot_token xoxb-xxxxxxxxxx-xxxxxxxxxxxxxxxxxxxx Webhooks Linking rooms with webhooks is not the recommended way for most situations, although it can be useful for single channels or if you are using Mattermost. Create a Matrix room in the usual manner for your client. Take a note of its Matrix room ID - it will look something like !aBcDeF:example.com . Create a Slack channel in the usual manner. Add an \u201cIncoming WebHooks\u201d integration to the Slack channel and take a note of its \u201cWebhook URL\u201d from the integration settings in Slack - it will look something like https://hooks.Slack.com/services/ABC/DEF/123 . Add an \u201cOutgoing WebHooks\u201d integration to the Slack channel and take a note of its token field. Add a URL to this web hook pointing back at the application service port you configured during setup. You will also need to determine the \u201cchannel ID\u201d that Slack uses to identify the channel. Unfortunately, it is not easily obtained from the Slack UI. The easiest way to do this is to send a message from Slack to the bridge; the bridge will log the channel ID as part of the unrecognised message output. You can then take note of the channel_id field. Issue a link command in the administration control room with these collected values as arguments: link --channel_id CHANNELID --room !the-matrix:room.id --webhook_url https://hooks.Slack.com/services/ABC/DEF/123 Unlink Channels If you ever want to unlink a channel, you can issue an unlink command: unlink -- room matrix_room_id Mattermost Because Mattermost\u2019s webhook APIs are Slack-compatible, the Matrix <\u2013> Slack bridge also works with it. The webhook configuration is very similar to Slack\u2019s and is documented on Mattermost\u2019s website .","title":"Linking Channels"},{"location":"link_channels/#linking-channels","text":"This bridge allows linking together pairs of Matrix rooms and Slack channels, relaying messages said by people in one side into the other. To create a link, first the individual Matrix room and Slack channel need to be created, and then a command needs to be issued in the administration console room to add the link to the bridge\u2019s database.","title":"Linking Channels"},{"location":"link_channels/#rtm-api","text":"This is the newer and recommended way to use the bridge. Add a custom app to your Slack team/workspace by visiting https://api.Slack.com/apps and clicking on Create New App . Name the app & select the team/workspace this app will belong to. Click on bot users and add a new bot user. We will use this account to bridge the the rooms. Click on Install App and Install App to Workspace . Note the access tokens show. You will need the Bot User OAuth Access Token and if you want to bridge files, the OAuth Access Token whenever you link a room. For each channel you would like to bridge, perform the following steps: Create a Matrix room in the usual manner for your client. Take a note of its Matrix room ID - it will look something like !aBcDeF:example.com . Invite the Matrix bot user to the Matrix channel you would like to bridge. /invite @Slackbot:my.server.here This is the same command used to invite the bot to the Admin Control Room. Note that you may have to wait for the Slackbot to accept the invitation. Invite the Slack bot user to the Slack channel you would like to bridge. /invite @bot-user-name You will also need to determine the \u201cchannel ID\u201d that Slack uses to identify the channel. Right-click your channel name in Slack and select \u201cCopy Link\u201d. The channel id is the last argument in the url ( https://XXX.Slack.com/messages/<channel id>/ ) Issue a link command in the administration control room with these collected values as arguments: link --channel_id CHANNELID --room !the-matrix:room.id --slack_bot_token xoxb-xxxxxxxxxx-xxxxxxxxxxxxxxxxxxxx","title":"RTM API"},{"location":"link_channels/#webhooks","text":"Linking rooms with webhooks is not the recommended way for most situations, although it can be useful for single channels or if you are using Mattermost. Create a Matrix room in the usual manner for your client. Take a note of its Matrix room ID - it will look something like !aBcDeF:example.com . Create a Slack channel in the usual manner. Add an \u201cIncoming WebHooks\u201d integration to the Slack channel and take a note of its \u201cWebhook URL\u201d from the integration settings in Slack - it will look something like https://hooks.Slack.com/services/ABC/DEF/123 . Add an \u201cOutgoing WebHooks\u201d integration to the Slack channel and take a note of its token field. Add a URL to this web hook pointing back at the application service port you configured during setup. You will also need to determine the \u201cchannel ID\u201d that Slack uses to identify the channel. Unfortunately, it is not easily obtained from the Slack UI. The easiest way to do this is to send a message from Slack to the bridge; the bridge will log the channel ID as part of the unrecognised message output. You can then take note of the channel_id field. Issue a link command in the administration control room with these collected values as arguments: link --channel_id CHANNELID --room !the-matrix:room.id --webhook_url https://hooks.Slack.com/services/ABC/DEF/123","title":"Webhooks"},{"location":"link_channels/#unlink-channels","text":"If you ever want to unlink a channel, you can issue an unlink command: unlink -- room matrix_room_id","title":"Unlink Channels"},{"location":"link_channels/#mattermost","text":"Because Mattermost\u2019s webhook APIs are Slack-compatible, the Matrix <\u2013> Slack bridge also works with it. The webhook configuration is very similar to Slack\u2019s and is documented on Mattermost\u2019s website .","title":"Mattermost"}]}